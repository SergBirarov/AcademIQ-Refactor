// <auto-generated />
using System;
using AcademIQ_backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcademIQ_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241027185655_FixRelationships")]
    partial class FixRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcademIQ_backend.Models.Calendar.CalendarEvents", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Calendar.SemesterCalendar", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalendarId"));

                    b.Property<string>("HolidayDates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SemesterEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SemesterStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CalendarId");

                    b.ToTable("SemesterCalendar");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Cities", b =>
                {
                    b.Property<int>("City_Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("City_Code"));

                    b.Property<string>("City_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("City_Code");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.ClassRoomCode", b =>
                {
                    b.Property<int>("ClassRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassRoomId"));

                    b.Property<string>("ClassRoom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassRoomId");

                    b.ToTable("ClassRoomCode");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.CoursesAll.ActiveStudentCourses", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("ActiveStudentCourses");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.CoursesAll.Courses", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<bool>("ClassRoomRequired")
                        .HasColumnType("bit");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.CoursesAll.CoursesOnAir", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClassRoomCode")
                        .HasColumnType("int");

                    b.Property<int?>("ClassRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "CourseId", "InstructorId", "StartDate");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("CoursesOnAir");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.ExamsAssignments.ActiveStudentAssignments", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmissionTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "AssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("ActiveStudentAssignments");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.ExamsAssignments.ActiveStudentExamGrades", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ExamId");

                    b.ToTable("ActiveStudentExamGrades");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.ExamsAssignments.Assignments", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.ExamsAssignments.ExamTypes", b =>
                {
                    b.Property<int>("ExamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamTypeId"));

                    b.Property<string>("ExamTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamTypeId");

                    b.ToTable("ExamTypes");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.ExamsAssignments.Exams", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("int");

                    b.HasKey("ExamId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ExamTypeId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.LecturesEvents.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTypeCode")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CourseId");

                    b.HasIndex("EventTypeCode");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.LecturesEvents.EventTypes", b =>
                {
                    b.Property<int>("EventCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventCode"));

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventCode");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.LecturesEvents.Lectures", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LectureId"));

                    b.Property<int>("ClassRoomCode")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("WeekDay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LectureId");

                    b.HasIndex("CourseId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Instructors", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("City_Code")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmploymentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("InstructorId");

                    b.HasIndex("City_Code");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Roles", b =>
                {
                    b.Property<short>("Role_Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Role_Code"));

                    b.Property<string>("Role_Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Role_Code");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<int>("City_Code")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Role_Code")
                        .HasColumnType("smallint");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("City_Code");

                    b.HasIndex("Role_Code");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Students", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("City_Code")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Enrollment")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("School_Year")
                        .HasColumnType("int");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("City_Code");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<short>("Role_Code")
                        .HasColumnType("smallint");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Role_Code");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.CoursesAll.ActiveStudentCourses", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.CoursesAll.Courses", "Course")
                        .WithMany("ActiveStudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademIQ_backend.Models.Users.Students", "Student")
                        .WithMany("ActiveStudentCourses")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.CoursesAll.Courses", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.Users.Instructors", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.CoursesAll.CoursesOnAir", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.ClassRoomCode", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId");

                    b.HasOne("AcademIQ_backend.Models.CoursesAll.Courses", "Course")
                        .WithMany("CoursesOnAir")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademIQ_backend.Models.Users.Students", "Student")
                        .WithMany("CoursesOnAir")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademIQ_backend.Models.Users.Instructors", "Instructor")
                        .WithMany("CoursesOnAir")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassRoom");

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.ExamsAssignments.ActiveStudentAssignments", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.ExamsAssignments.Assignments", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademIQ_backend.Models.Users.Students", "Student")
                        .WithMany("ActiveStudentAssignments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.ExamsAssignments.ActiveStudentExamGrades", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.Users.Students", "Student")
                        .WithMany("ActiveStudentExamGrades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.ExamsAssignments.Assignments", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.CoursesAll.Courses", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.ExamsAssignments.Exams", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.CoursesAll.Courses", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademIQ_backend.Models.ExamsAssignments.ExamTypes", "ExamType")
                        .WithMany()
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ExamType");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.LecturesEvents.Event", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.CoursesAll.Courses", "Course")
                        .WithMany("Event")
                        .HasForeignKey("CourseId");

                    b.HasOne("AcademIQ_backend.Models.LecturesEvents.EventTypes", "EventType")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("EventTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.LecturesEvents.Lectures", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.CoursesAll.Courses", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Instructors", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.Cities", "City_Name")
                        .WithMany("Instructors")
                        .HasForeignKey("City_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademIQ_backend.Models.Users.Users", null)
                        .WithMany("Instructors")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("City_Name");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Staff", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.Cities", "City_Name")
                        .WithMany("Staff")
                        .HasForeignKey("City_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademIQ_backend.Models.Users.Roles", "Role")
                        .WithMany("Staff")
                        .HasForeignKey("Role_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademIQ_backend.Models.Users.Users", null)
                        .WithMany("Staffs")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("City_Name");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Students", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.Cities", "City_Name")
                        .WithMany("Students")
                        .HasForeignKey("City_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademIQ_backend.Models.Users.Users", null)
                        .WithMany("Students")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("City_Name");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Users", b =>
                {
                    b.HasOne("AcademIQ_backend.Models.Users.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Cities", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Staff");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.CoursesAll.Courses", b =>
                {
                    b.Navigation("ActiveStudentCourses");

                    b.Navigation("Assignments");

                    b.Navigation("CoursesOnAir");

                    b.Navigation("Event");

                    b.Navigation("Exams");

                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.LecturesEvents.EventTypes", b =>
                {
                    b.Navigation("CalendarEvents");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Instructors", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("CoursesOnAir");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Roles", b =>
                {
                    b.Navigation("Staff");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Students", b =>
                {
                    b.Navigation("ActiveStudentAssignments");

                    b.Navigation("ActiveStudentCourses");

                    b.Navigation("ActiveStudentExamGrades");

                    b.Navigation("CoursesOnAir");
                });

            modelBuilder.Entity("AcademIQ_backend.Models.Users.Users", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Staffs");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
